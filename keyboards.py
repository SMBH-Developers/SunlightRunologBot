import json
import texts

from aiogram import types
from itertools import islice


class Markups:
    @staticmethod
    def get_titles_from_kb(kb: types.ReplyKeyboardMarkup):
        json_kb = json.loads(kb.as_json())['keyboard']
        titles = []
        for row in json_kb:
            for btn in row:
                titles.append(btn['text'])
        return titles

    @staticmethod
    def chunk(it, size):
        it = iter(it)
        return iter(lambda: tuple(islice(it, size)), ())

    admin_mrkup = types.InlineKeyboardMarkup()
    admin_mrkup.add(types.InlineKeyboardButton(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ', callback_data='Admin_Users_Total'))
    admin_mrkup.add(types.InlineKeyboardButton(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='Admin_Users_For_TODAY'))

    back_admin_mrkup = types.InlineKeyboardMarkup()
    back_admin_mrkup.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞', callback_data='Admin_BACK'))
    # *********************************************************************************
    mrkup_to_start = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mrkup_to_start.add(types.KeyboardButton(text='‚ö°Ô∏è –†–∞—Å–∫–ª–∞–¥‚ö°Ô∏è'))
    titles_mrkup_to_start = get_titles_from_kb(mrkup_to_start)
    # *********************************************************************************
    combinations_mrkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    combinations_mrkup.add(types.KeyboardButton('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Ññ1'), types.KeyboardButton('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Ññ2'))
    combinations_mrkup.add(types.KeyboardButton('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Ññ3'), types.KeyboardButton('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Ññ4'))
    titles_of_combination_mrkup = get_titles_from_kb(combinations_mrkup)
    # *********************************************************************************
    menu_mrkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu_mrkup.add(types.KeyboardButton('üßø–í—Å–µ –æ —Ä—É–Ω–∞—Ö'))
    menu_mrkup.add(types.KeyboardButton('‚ÑπÔ∏è–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ä—É–Ω'),
                   types.KeyboardButton('üìö–û–±—É—á–µ–Ω–∏–µ —Ä—É–Ω–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É'))
    menu_mrkup.add(types.KeyboardButton('ü§©–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ü§©'))
    titles_of_menu_mrkup = get_titles_from_kb(menu_mrkup)
    # *********************************************************************************
    mrkup_to_del = types.InlineKeyboardMarkup()
    mrkup_to_del.add(types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='DELETE'))
    # *********************************************************************************
    values_of_all_info_runes = chunk(list(texts.info_about_all_runes.keys()), 6)
    page_mrkups = []
    for index_page_mrkup, page_mrkup in enumerate(values_of_all_info_runes):
        count = 6 * index_page_mrkup
        main_mrkup = types.InlineKeyboardMarkup()
        main_mrkup.add(
            types.InlineKeyboardButton('üîé–ü–æ–∏—Å–∫ —Ä—É–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data='info_runes?search_by_name=none'))
        for couple_btns in chunk(page_mrkup, 2):
            btns = []
            text_btn_1, text_btn_2 = couple_btns
            assert type(text_btn_1) is str and type(text_btn_2) is str
            btns.append(types.InlineKeyboardButton(text=text_btn_1, callback_data=f'info_runes?choose_rune={count}'))
            count += 1
            btns.append(types.InlineKeyboardButton(text=text_btn_2, callback_data=f'info_runes?choose_rune={count}'))
            count += 1
            main_mrkup.add(*btns)
        down_btns = []
        if index_page_mrkup != 0:
            down_btns.append(
                types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'info_runes?next_page={index_page_mrkup - 1}'))
        if index_page_mrkup != 3:
            down_btns.append(
                types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data=f'info_runes?next_page={index_page_mrkup + 1}'))
        main_mrkup.add(*down_btns)
        page_mrkups.append(main_mrkup)
    cancel_searching_rune_by_name = types.InlineKeyboardMarkup()
    cancel_searching_rune_by_name.add(
        types.InlineKeyboardButton(text='‚õîÔ∏è –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞', callback_data='info_runes?cancel_search=none'))
    # –ú–µ–Ω—é: –í—Å—ë –æ —Ä—É–Ω–∞—Ö
    all_about_runes_mrkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    all_about_runes_mrkup.add(types.KeyboardButton('üßø –î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã —Ä—É–Ω—ã?'), types.KeyboardButton('üßø –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä—É–Ω—ã?'))
    all_about_runes_mrkup.add(types.KeyboardButton('üßø –†—É–Ω–∞ –¥–Ω—è'), types.KeyboardButton('üßø –ú–æ–∂–Ω–æ –ª–∏ –≥–∞–¥–∞—Ç—å –Ω–∞ —Ä—É–Ω–∞—Ö?'))
    all_about_runes_mrkup.add(types.KeyboardButton('üßø –ö–∞–∫–∏–µ –≤–∏–¥—ã —Ä—É–Ω –±—ã–≤–∞—é—Ç?'),
                              types.KeyboardButton('üßø –ö–∞–∫–∞—è —Ä—É–Ω–∞ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ?'))
    all_about_runes_mrkup.add(types.KeyboardButton('üßø –ß—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –Ω–∞ —Ä—É–Ω–∞—Ö?'),
                              types.KeyboardButton('üßø –ö–∞–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ä—É–Ω–∞–º–∏ –∏ –¢–∞—Ä–æ?'))
    all_about_runes_mrkup.add(types.KeyboardButton('üßø –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—É—Å—Ç–∞—è —Ä—É–Ω–∞ –≤ —Ä–∞—Å–∫–ª–∞–¥–µ?'))
    all_about_runes_mrkup.add(types.KeyboardButton('üëà–û–±—Ä–∞—Ç–Ω–æ'))
    titles_all_about_runes_mrkup = get_titles_from_kb(all_about_runes_mrkup)
    # *********************************************************************************
    mrkup_for_every_info_btn = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mrkup_for_every_info_btn.add(types.KeyboardButton('üëà–ù–∞–∑–∞–¥'))
    # *********************************************************************************
    back_to_main_menu_mrkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_to_main_menu_mrkup.add(types.KeyboardButton('üëà–û–±—Ä–∞—Ç–Ω–æ'))
    # *********************************************************************************
    to_our_autoanswer_mrkup = types.InlineKeyboardMarkup()
    to_our_autoanswer_mrkup.add(
        types.InlineKeyboardButton(text='üîÆ–ü–æ–ª—É—á–∏—Ç—å —Ä—É–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥', url="https://t.me/RunologyMentor"))
    # *********************************************************************************
    study_rune_mrkup_on_page_1 = types.InlineKeyboardMarkup()
    study_rune_mrkup_on_page_1.add(types.InlineKeyboardButton('–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data='rune_study_to_page_2'))
    # *********************************************************************************
    study_rune_mrkup_on_page_2 = types.InlineKeyboardMarkup()
    study_rune_mrkup_on_page_2.add(types.InlineKeyboardButton('üóÉÔ∏è–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–∫–ª–∞–¥–∞', callback_data='studies_options'))
    # *********************************************************************************
    options_studies_rune_mrkup = types.InlineKeyboardMarkup()
    options_studies_rune_mrkup.add(types.InlineKeyboardButton('–°–ª—É—á–∞–π–Ω–∞—è —Ä—É–Ω–∞', callback_data='check_study?index=0'))
    options_studies_rune_mrkup.add(types.InlineKeyboardButton('–ú–µ—Ç–æ–¥ —Ç—Ä—ë—Ö –ù–æ—Ä–Ω', callback_data='check_study?index=1'))
    options_studies_rune_mrkup.add(
        types.InlineKeyboardButton('–ß–µ—Ç—ã—Ä—ë—Ö—Ä—É–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥', callback_data='check_study?index=2'))
    options_studies_rune_mrkup.add(
        types.InlineKeyboardButton('–†–∞—Å–∫–ª–∞–¥ –≤ –ø—è—Ç—å —Ä—É–Ω', callback_data='check_study?index=3'))
    options_studies_rune_mrkup.add(types.InlineKeyboardButton('–†–∞—Å–∫–ª–∞–¥ ¬´–ö—Ä–µ—Å—Ç¬ª', callback_data='check_study?index=4'))
    options_studies_rune_mrkup.add(
        types.InlineKeyboardButton('–®–µ—Å—Ç–∏—Ä—É–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥', callback_data='check_study?index=5'))
    options_studies_rune_mrkup.add(
        types.InlineKeyboardButton('–†–∞—Å–∫–ª–∞–¥ –≤ —Å–µ–º—å —Ä—É–Ω', callback_data='check_study?index=6'))
    # *********************************************************************************
    mrkup_under_every_study_rune = types.InlineKeyboardMarkup()
    mrkup_under_every_study_rune.add(types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='studies_options'))
    # *********************************************************************************
