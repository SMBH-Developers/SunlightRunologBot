import asyncio
import logging
import re

import texts

from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram import executor, types, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import markdown

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from pathlib import Path
from loguru import logger

from keyboards import Markups
from bf_texts import bf_sending, SendingData
from src.common import settings
from src.models import db, db_sendings
from src import DATA_DIR

from data.skip_100_lead import skip_100_leads


class States(StatesGroup):
    search_rune_by_name = State()
    name = State()
    bth = State()


storage = RedisStorage2(db=settings.redis_db, pool_size=40)
bot = Bot(settings.tg_token)
dp = Dispatcher(bot, storage=storage)
ADMIN_IDS = (1188441997, 791363343)
markups = Markups()

language = 'ru_RU'


async def get_photo_id(path: Path) -> str | types.InputFile:
    photo_id = await db.get_photo_id(path)
    if photo_id is None:
        photo_id = types.InputFile(path)
    return photo_id


@dp.message_handler(commands=['start'], state='*')
@logger.catch
async def start_mes(message: types.Message, state: FSMContext) -> None:
    path = DATA_DIR / 'photos_to_message/start_photo.png'
    photo = await get_photo_id(path)
    await state.finish()
    await db.registrate_if_not_exists(message.from_user.id)
    await message.answer_photo(photo=photo, caption=texts.welcome_text, reply_markup=markups.mrkup_to_start, parse_mode='html')


@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state='*', commands=['admin'])
@logger.catch
async def admin_menu(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markups.admin_mrkup)


@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data.startswith('Admin'), state='*')
@logger.catch
async def admin_calls(call: types.CallbackQuery, state: FSMContext) -> None:
    action = '_'.join(call.data.split('_')[1:])
    if action == 'Users_Total':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {await db.get_count_all_users()}',
                                     reply_markup=markups.back_admin_mrkup)

    elif action == 'Users_For_TODAY':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {await db.users_for_today()}',
                                     reply_markup=markups.back_admin_mrkup)

    elif action == 'BACK':
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markups.admin_mrkup)


@dp.message_handler(lambda message: message.text in markups.titles_mrkup_to_start, state='*')
@logger.catch
async def send_combinations_to_user(message: types.Message, state: FSMContext):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å"""
    asyncio.create_task(send_combinations(message.from_user.id))


@logger.catch
async def send_combinations(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
    await bot.send_message(user_id, texts.text_before_sending_combinations, reply_markup=types.ReplyKeyboardRemove())

    for index, combination in enumerate(texts.combinations):
        photo_id = await get_photo_id(combination['photo'])
        await asyncio.sleep(2)
        msg = await bot.send_photo(user_id, photo_id, caption=combination['text'], reply_markup=types.ReplyKeyboardRemove())
        if isinstance(photo_id, types.InputFile):
            await db.register_photo(combination['photo'], msg["photo"][0]["file_id"])

    await asyncio.sleep(1)
    await bot.send_message(user_id, text=texts.to_send_after_combinations, reply_markup=markups.combinations_mrkup)


@dp.message_handler(lambda message: message.text in markups.titles_of_combination_mrkup, state='*')
@logger.catch
async def answer_on_combination(message: types.Message):
    number = int(message.text[-1])-1
    await db.set_user_chose_combination(message.from_user.id, number)
    await message.answer(texts.analyzes_of_chosen_combination[number], reply_markup=markups.menu_mrkup)
    await asyncio.create_task(send_byte_message(message.from_user.id))


async def send_byte_message(user_id: int):
    await asyncio.sleep(2)
    await bot.send_message(user_id, texts.get_free_analyze, reply_markup=markups.to_our_autoanswer_mrkup)


@dp.message_handler(lambda message: message.text == 'üëà–û–±—Ä–∞—Ç–Ω–æ', state='*')
@logger.catch
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await message.answer(texts.menu_text, reply_markup=markups.menu_mrkup)


@dp.message_handler(lambda message: message.text == 'üëà–ù–∞–∑–∞–¥', state='*')
@dp.message_handler(lambda message: message.text == 'üßø–í—Å–µ –æ —Ä—É–Ω–∞—Ö', state='*')
async def all_about_runes(message: types.Message, state: FSMContext):
    await message.answer(texts.info_menu_text, reply_markup=markups.all_about_runes_mrkup)


@dp.message_handler(lambda message: message.text == '‚ÑπÔ∏è–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ä—É–Ω', state='*')
@logger.catch
async def info_about_runes(message: types.Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–Ω—É:', reply_markup=markups.page_mrkups[0])


@dp.message_handler(lambda message: message.text == 'üìö–û–±—É—á–µ–Ω–∏–µ —Ä—É–Ω–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É', state='*')
async def study_rune_info_start(message: types.Message, state: FSMContext):
    path = DATA_DIR / "photos_to_message/learning_rune.JPG"
    photo_id = await get_photo_id(path)
    msg = await message.answer_photo(photo_id, texts.study_rune_text_1, reply_markup=markups.study_rune_mrkup_on_page_1)
    if isinstance(photo_id, types.InputFile):
        await db.register_photo(path, msg["photo"][0]["file_id"])


@dp.message_handler(lambda message: message.text == 'ü§©–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ü§©', state='*')
async def menu_metaphorical_analysis(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ –ò–º—è üëá", reply_markup=markups.back_to_main_menu_mrkup)
    await state.set_state(States.name.state)


@dp.message_handler(state=States.name)
async def set_number_metaphorical_analysis(message: types.Message, state:FSMContext):
    await message.answer("–°—É–ø–µ—Ä! –î–µ–Ω—å —Ç–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì üëá", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(States.bth.state)

@dp.message_handler(state=States.bth)
async def menu_metaphorical_analysis(message: types.Message, state: FSMContext):
    date_pattern = r'\d{2}\.\d{2}\.\d{4}'  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
    if re.match(date_pattern, message.text):
        await message.answer('ü•≥ –Ø –í–∞—Å –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ–ª–∏ –ø–æ–ø–∞—Å—Ç—å –≤ —á–∏—Å–ª–æ —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ä—É–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞.\n\n'
                             '–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üëâ @RunologyMentor —Å–ª–æ–≤–æ "–†–∞—Å–∫–ª–∞–¥"', reply_markup=markups.back_to_main_menu_mrkup)
        await state.finish()
    else:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


async def try_del(call: types.CallbackQuery | types.Message):
    try:
        if isinstance(call, types.CallbackQuery):
            await call.message.delete()
        else:
            msg = call
            await msg.delete()
    except:
        ...


@dp.callback_query_handler(lambda call: call.data == 'rune_study_to_page_2', state='*')
@logger.catch
async def study_rune_page_2(call: types.CallbackQuery, state: FSMContext):
    await try_del(call)
    await call.message.answer(texts.study_rune_text_2, reply_markup=markups.study_rune_mrkup_on_page_2)


@dp.callback_query_handler(lambda call: call.data == 'studies_options', state='*')
@logger.catch
async def studies_options(call: types.CallbackQuery, state: FSMContext):
    await try_del(call)
    await call.message.answer(texts.choose_study_rune_option_text, reply_markup=markups.options_studies_rune_mrkup)


@dp.callback_query_handler(lambda call: call.data == 'DELETE', state='*')
async def del_msg(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except exceptions.TelegramAPIError:
        await call.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.')


@dp.callback_query_handler(lambda call: call.data.startswith('check_study?'), state='*')
async def check_study_of_runes(call: types.CallbackQuery, state: FSMContext):
    key_arg, arg_value = call.data.split('?')[1].split('=')
    arg_value = int(arg_value)
    info_study = texts.studies_rune[arg_value]
    await try_del(call)

    if info_study['photo'] is not None:
        photo_id = await get_photo_id(info_study['photo'])
        msg = await call.message.answer_photo(photo_id, caption=info_study['text'], reply_markup=markups.mrkup_under_every_study_rune)
        if isinstance(photo_id, types.InputFile):
            await db.register_photo(info_study['photo'], msg["photo"][0]["file_id"])

    else:
        await bot.send_message(call.from_user.id, info_study['text'], reply_markup=markups.mrkup_under_every_study_rune)


@dp.callback_query_handler(lambda call: call.data.startswith('info_runes?'), state='*')
async def info_runes(call: types.CallbackQuery, state: FSMContext):
    key_arg, arg_value = call.data.split('?')[1].split('=')
    if key_arg == 'choose_rune':
        index_rune = int(arg_value)
        rune = texts.values_info_runes[index_rune]
        photo_id = await get_photo_id(rune['photo'])
        msg = await call.message.answer_photo(photo_id, caption=rune['text'], reply_markup=markups.mrkup_to_del)
        if isinstance(photo_id, types.InputFile):
            await db.register_photo(rune['photo'], msg["photo"][0]["file_id"])

    elif key_arg == 'next_page':
        index_page = int(arg_value)
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–Ω—É:', reply_markup=markups.page_mrkups[index_page])

    elif key_arg == 'search_by_name':
        await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ üîé:', reply_markup=markups.cancel_searching_rune_by_name)
        await state.set_state(States.search_rune_by_name.state)

    elif key_arg == 'cancel_search':
        await state.finish()
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–Ω—É:', reply_markup=markups.page_mrkups[0])


async def send_rune_day(user_id):
    user_step = await db.get_rune_day_step(user_id)
    day_card_text = texts.days_runes[int(user_step)]
    now_time = datetime.now()
    tomorrow_time = (now_time + timedelta(days=1))
    necessary_time = datetime(year=tomorrow_time.year, month=tomorrow_time.month, day=tomorrow_time.day, hour=0,
                              minute=0, second=0)
    seconds_left = (necessary_time - now_time).total_seconds()
    hours_left = round(seconds_left / 60 // 60)
    minutes_left = round(seconds_left // 60 % 60)
    end_of_text = f"‚è≥–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É–Ω—ã –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {hours_left} —á–∞—Å–∞ {minutes_left} –º–∏–Ω—É—Ç—ã."
    main_text = f'{day_card_text}\n\n{end_of_text}'

    path = Path("data/photos_to_message/day_rune.JPG")
    photo_id = await get_photo_id(path)
    msg = await bot.send_photo(user_id, photo_id)
    await bot.send_message(user_id, main_text, reply_markup=markups.mrkup_for_every_info_btn)
    if isinstance(photo_id, types.InputFile):
        await db.register_photo(path, msg["photo"][0]["file_id"])


@dp.message_handler(lambda message: message.text in markups.titles_all_about_runes_mrkup, state='*')
async def info_menu(message: types.Message, state: FSMContext):
    if message.text == 'üßø –†—É–Ω–∞ –¥–Ω—è':
        await send_rune_day(message.from_user.id)
    elif message.text == 'üßø –ö–∞–∫–∏–µ –≤–∏–¥—ã —Ä—É–Ω –±—ã–≤–∞—é—Ç?':
        path = Path("data/photos_to_message/runes_kinds.JPG")
        photo_id = await get_photo_id(path)
        msg = await message.answer_photo(photo_id, texts.all_about_runes_texts[message.text], reply_markup=markups.mrkup_for_every_info_btn)
        if isinstance(photo_id, types.InputFile):
            await db.register_photo(path, msg["photo"][0]["file_id"])

    elif message.text == 'üßø –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä—É–Ω—ã?':
        path = Path("data/photos_to_message/runes_is_.JPG")
        photo_id = await get_photo_id(path)
        msg = await message.answer_photo(photo_id, texts.all_about_runes_texts[message.text], reply_markup=markups.mrkup_for_every_info_btn)
        if isinstance(photo_id, types.InputFile):
            await db.register_photo(path, msg["photo"][0]["file_id"])
    else:
        await message.answer(texts.all_about_runes_texts[message.text], reply_markup=markups.mrkup_for_every_info_btn)


@dp.message_handler(state=States.search_rune_by_name)
async def search_info_by_name_rune(message: types.Message, state: FSMContext):
    rune_name = "üßø"+message.text.capitalize() if 'üßø' not in message.text else message.text.capitalize()
    info_rune = texts.info_about_all_runes.get(rune_name)
    if info_rune is None:
        await message.answer(f'–†—É–Ω–∞ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=markups.mrkup_to_del)
    else:
        path = info_rune['photo']
        photo_id = await get_photo_id(path)
        msg = await message.answer_photo(photo_id, caption=info_rune['text'], reply_markup=markups.mrkup_to_del)
        if isinstance(photo_id, types.InputFile):
            await db.register_photo(path, msg["photo"][0]["file_id"])


async def sending_message_2_h():
    while True:
        try:
            await asyncio.sleep(12)

            text= f'üòä –Ø –≤–∏–∂—É –≤—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª–∞–¥–∏–ª–∏ —Å —Ä—É–Ω–∞–º–∏. –ü—Ä–∏–≥–ª–∞—à–∞—é –í–∞—Å –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –æ—Ç –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—É–Ω–æ–ª–æ–≥–∞. –û–Ω–∞ —Å–¥–µ–ª–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üòé\n\n‚ùóÔ∏è–ù–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å {markdown.hbold("3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞")}.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ {markdown.hbold("–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª.—Å")} @RunologyMentor –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n–ñ–¥—É –≤–∞—Åüòä'
            photo = await get_photo_id(Path('data/photos_to_message/2h.png'))
            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton("ü§©–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—éü§©", url="https://t.me/RunologyMentor"))

            users = await db_sendings.get_users_2h_autosending()
            for user in users:
                try:
                    await bot.send_photo(user, photo=photo, caption=text, parse_mode='html', reply_markup=mrkup)
                    logger.info(f'ID: {user}. Got autosending_2h')
                    await db_sendings.mark_got_2h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1188441997, f'Happened: {ex}')



async def sending_message_24_h():
    while True:
        try:
            await asyncio.sleep(12)

            text = f'‚ù§ –†–∞—Å–∫–ª–∞–¥ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ üßø –°—Ç–∞—Ä—à–µ–≥–æ –§—É—Ç–∞—Ä–∫–∞ {markdown.hbold("–ø–æ —Ä–∞–∑–±–æ—Ä—É –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")} —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —è –¥–µ–ª–∞—é –µ–≥–æ {markdown.hbold("–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è 5 —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤")}, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏ –Ω–∞–ø–∏—à—É—Çüòâ.\n\n‚ùóÔ∏è–û–Ω–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ª–∏—à—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ª—É–Ω–Ω—ã–µ —Å—É—Ç–∫–∏. {markdown.hbold("–ó–∞–ø–∏—Å–∞—Ç—å –í–∞—Å?")}'
            photo = await get_photo_id(Path('data/photos_to_message/24h.png'))

            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton("‚ö°Ô∏è–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚ö°Ô∏è", url="https://t.me/RunologyMentor"))

            users = await db_sendings.get_users_24h_autosending()
            for user in users:
                try:
                    await bot.send_photo(user, photo=photo, caption=text, parse_mode='html', reply_markup=mrkup)
                    logger.info(f'ID: {user}. Got autosending_24h')
                    await db_sendings.mark_got_24h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1188441997, f'Happened: {ex}')


async def sending_message_48_h():
    while True:
        try:
            await asyncio.sleep(12)

            text= f'–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –µ—Å—Ç—å {markdown.hbold("–º–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏")}, –∫–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ {markdown.hbold("—É–ª—É—á—à–∏—Ç—å –∂–∏–∑–Ω—å.")} –ù–∞ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏—Ö —Ä—É–Ω–∞—Ö –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏, –ª–∏–±–æ –∂–µ —Å—Ä–∞–∑—É –Ω–∞ –≤—Å–µ. –ù–æ —è —É—Å–ø–µ—é –ø—Ä–∏–Ω—è—Ç—å –≤ —ç—Ç–∏ –≤–æ–ª—à–µ–±–Ω—ã–µ –¥–Ω–∏ –ª–∏—à—å 9 —á–µ–ª–æ–≤–µ–∫. {markdown.hbold("–ó–∞–ø–∏—Å–∞—Ç—å –í–∞—Å?")}\n\n–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–µ –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ñ–¥—É –≤–∞—Å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö @RunologyMentor'
            photo = await get_photo_id(Path('data/photos_to_message/48h.png'))

            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton("‚ö°Ô∏è–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥  ‚ö°Ô∏è", url="https://t.me/RunologyMentor"))

            users = await db_sendings.get_users_48h_autosending()
            for user in users:
                try:
                    await bot.send_photo(user, photo=photo, caption=text, parse_mode='html', reply_markup=mrkup)
                    logger.info(f'ID: {user}. Got autosending_text_48h')
                    await db_sendings.mark_got_48h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1188441997, f'Happened: {ex}')


async def sending_message_52_h():
    while True:
        try:
            await asyncio.sleep(12)

            text= f'–°–µ–≥–æ–¥–Ω—è —Å –≤–∞–º–∏ –≥–æ–≤–æ—Ä—è—Ç {markdown.hbold("–î–µ–Ω–µ–∂–Ω—ã–µ —Ä—É–Ω—ã")}. –≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª –∏ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n{markdown.hbold("–†—É–Ω—ã –º–æ–≥—É—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å:")}\n–° –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å—Ç–æ–∏—Ç –æ–∂–∏–¥–∞—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è.\n–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å, —á—Ç–æ–±—ã –æ–±—Ä–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, —Ä–∞–±–æ—Ç—É –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ –≤ —Ü–µ–ª–æ–º.\n–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n–ö—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–∞–¥—ë–∂–Ω—ã–º –¥–µ–ª–æ–≤—ã–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –∏–ª–∏ –∫–∞–∫–∏–º-—Ç–æ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –¥–µ–Ω—å–≥–∞–º–∏.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥ {markdown.hbold("–±–µ—Å–ø–ª–∞—Ç–Ω–æ")}, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É @RunologyMentor\n–≤–∞—à–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.'
            photo = await get_photo_id(Path('data/photos_to_message/52h.png'))

            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥", url="https://t.me/RunologyMentor"))

            users = await db_sendings.get_users_52h_autosending()
            for user in users:
                try:
                    await bot.send_photo(user, photo=photo, caption=text, parse_mode='html', reply_markup=mrkup)
                    logger.info(f'ID: {user}. Got autosending_text_52h')
                    await db_sendings.mark_got_52h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1188441997, f'Happened: {ex}')


async def sending_message_76_h():
    while True:
        try:
            await asyncio.sleep(12)

            text= f'‚ù§Ô∏è –ù–∞—à–∏ –ª—é–±–æ–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –Ω–∞—Å. üòá –û–Ω–∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç –∏ –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞—é—Ç –Ω–∞–º: –≥–¥–µ –Ω–∞–º —Å—Ç–æ–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ç–µ–º –∏–ª–∏ –∏–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º. –ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º {markdown.hbold("–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å—á–∞—Å—Ç—å—è")} –∏ —É–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—É—é –º—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä–∞—Ö.\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º {markdown.hbold("–ª—é–±–æ–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")}, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–≤–µ—Ç–∏—Ç –≤–∞–º —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ –∏ —Å–ø–æ—Å–æ–±—ã –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏üíï –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–ºüë©‚Äç‚ù§Ô∏è‚Äçüë®.\n\nüî• –ü–æ–ª—É—á–∏—Ç—å {markdown.hbold("–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")}üíû –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ –≤ –ª.—Å @RunologyMentor'
            photo = await get_photo_id(Path('data/photos_to_message/76h.png'))

            mrkup = types.InlineKeyboardMarkup()
            mrkup.add(types.InlineKeyboardButton("ü•∞–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—åü•∞", url="https://t.me/RunologyMentor"))

            users= await db_sendings.get_users_76h_autosending()
            for user in users:
                try:
                    await bot.send_photo(user, photo=photo, caption=text, parse_mode='html', reply_markup=mrkup)
                    logger.info(f'ID: {user}. Got autosending_text_76h')
                    await db_sendings.mark_got_76h_autosending(user)
                    await asyncio.sleep(0.2)
                except (exceptions.BotBlocked, exceptions.UserDeactivated):
                    logger.error(f'ID: {user}. DELETED')
                    await db.delete_user(user)
                except Exception as ex:
                    logger.error(f'got error: {ex}')
        except Exception as ex:
            await bot.send_message(1188441997, f'Happened: {ex}')


async def bf_task(id_: int, sending: SendingData, db_func, skip_if_chat_member: bool = False, only_for_chat_member: bool = False):
    try:

        if skip_if_chat_member or only_for_chat_member:
            chat_member = await bot.get_chat_member(-1002059782974, id_)
            if chat_member.is_chat_member() and skip_if_chat_member:
                return 'skip'
            elif not chat_member.is_chat_member() and only_for_chat_member:
                return 'skip'
            name = chat_member.user.first_name
        else:
            name = None

        if id_ in skip_100_leads:
            return 'skip'

        text = await sending.get_text(bot, id_, name)
        if sending.photo is not None:
            await bot.send_photo(id_, types.InputFile(sending.photo), caption=text, reply_markup=sending.kb,
                                 parse_mode='html', disable_notification=True)
        else:
            await bot.send_message(id_, text=text, reply_markup=sending.kb,
                                   parse_mode='html', disable_web_page_preview=True)
        await db_func(id_)
        sending.count += 1
        logger.success(f'{id_} sending_{sending.uid} text')

    except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound) as ex:
        logger.error(f'{id_} {ex}')
        logger.exception(f'ID: {id_}. DELETED')
        await db.delete_user(id_)
    except Exception as e:
        logger.error(f'BUG: {e}')
    else:
        return 'success'
    return 'false'


async def sending_newsletter():
    white_day = 24
    print("–ù–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    while True:
        await asyncio.sleep(2)
        now_time = datetime.now()

        if now_time.day > white_day:
            return

        if now_time.day == white_day and now_time.hour >= 17:
            try:
                tasks = []
                users = [1371617744] + list(await db_sendings.get_users_for_sending_newsletter())
                print(len(users))
                for user in users:
                    logger.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - {user}")
                    try:
                        _s = bf_sending
                        # if _s.count >= 80000:
                        #     break
                        tasks.append(asyncio.create_task(bf_task(user, _s, db_sendings.set_newsletter)))
                        if len(tasks) > 40:
                            print(len(tasks))
                            r = await asyncio.gather(*tasks, return_exceptions=False)
                            await asyncio.wait(tasks)
                            await asyncio.sleep(0.4)
                            logger.success(f"{r.count('success')=}", f"{r.count('false')=}", f"{r.count('skip')=}")
                            tasks.clear()

                    except Exception as ex:
                        logger.error(f'–û—à–∏–±–∫–∞ –≤ –º–∞–ª–æ–º –±–ª–æ–∫–µ sending: {ex}')
                    finally:
                        await asyncio.sleep(0.03)
            except Exception as ex:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ–ª—å—à–æ–º –±–ª–æ–∫–µ sending - {ex}")
            finally:
                await bot.send_message(1371617744, f"ERROR –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–æ–ø–Ω—É–ª–∞—Å—å.")
                logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")


async def on_startup(_):
    asyncio.create_task(sending_newsletter())
    asyncio.create_task(sending_message_2_h())
    asyncio.create_task(sending_message_24_h())
    asyncio.create_task(sending_message_48_h())
    asyncio.create_task(sending_message_52_h())
    asyncio.create_task(sending_message_76_h())

try:
    a_logger = logging.getLogger('apscheduler.scheduler')
    a_logger.setLevel(logging.DEBUG)
    executor.start_polling(dp, on_startup=on_startup)
finally:
    ...
